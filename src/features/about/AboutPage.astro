---
import Layout from "../../layouts/Layout.astro";
import Education from "./Education.astro";
import Experience from "./Experience.astro";

import { technical } from "../../data";
import Container from "../../components/Container.astro";

const experienceSection = "experienceSection";
const educationSection = "educationSection";
const technicalSection = "technicalSection";
const contactSection = "contactSection";
---

<Layout title="SK Details">
  <Container>
    <div
      class="bg-neutral-900 text-white text-sm md:text-md p-10 pt-20 md:p-20 grid grid-cols-1 lg:grid-cols-2 gap-y-20"
    >
      <Experience sectionID={experienceSection} />

      <div
        id="canvas-container"
        class="hidden lg:flex lg:justify-center xl:justify-start"
      >
        <canvas id="aboutme-3d" class=""></canvas>
      </div>

      <Education sectionID={educationSection} />

      <section id={technicalSection} class="text-white col-span-2">
        <h1 class="text-4xl mb-6">Technical</h1>
        <ul class="grid grid-cols-1 md:grid-cols-2 gap-6 max-w-3xl">
          {
            technical.map(({ skill, description }) => {
              return (
                <li class="grid auto-cols-auto gap-2">
                  <span class="text-xl pt-4 border-t-2 border-white">
                    {skill}
                  </span>
                  <span class="max-w-xs text-sm">{description}</span>
                </li>
              );
            })
          }
        </ul>
      </section>

      <section
        id={contactSection}
        class="text-white col-span-2 max-w-lg text-lg"
      >
        <h1 class="text-4xl mb-6">Contact Me</h1>
        <form
          class="grid auto-rows-auto gap-2"
          action="mailto:shaneel_kumar@live.com"
          method="post"
          enctype="text/plain"
        >
          <label for="message" class="text-sm">Send me an email:</label>
          <textarea
            class="text-black w-full max-w-lg h-40 resize-none p-6"
            name="message"
            id="message"></textarea>
          <button
            class="place-self-end mt-4 mr-4 border-2 border-white hover:border-neutral-900 hover:bg-white hover:text-neutral-900 p-2"
            type="submit"
          >
            Submit
          </button>
        </form>
      </section>

      <!-- <button
      class="w-40 h-16 bg-white hover:bg-neutral-900 text-neutral-900 hover:text-white hover:border-2 hover:border-white text-md"
    >
      Download CV
    </button> -->
    </div>
  </Container>

  <script>
    import { basicRevealAnimation, scrollRevealAnimation } from "../../utils";
    const experienceSection = document.getElementById("experienceSection");
    const educationSection = document.getElementById("educationSection");
    const technicalSection = document.getElementById("technicalSection");
    const contactSection = document.getElementById("contactSection");

    experienceSection && basicRevealAnimation(experienceSection);
    educationSection && scrollRevealAnimation(educationSection)();
    technicalSection && scrollRevealAnimation(technicalSection)();
    contactSection && scrollRevealAnimation(contactSection)(75);

    // ThreeJS
    import * as THREE from "three";
    const container = document.getElementById(
      "canvas-container"
    ) as HTMLDivElement;
    const canvas = document.getElementById("aboutme-3d") as HTMLCanvasElement;
    const scene = new THREE.Scene();

    const sizes = {
      width: container.clientWidth,
      height: container.clientHeight,
    };

    const camera = new THREE.PerspectiveCamera(
      75,
      sizes.width / sizes.height,
      0.1,
      100
    );
    camera.position.z = 2;

    const material = new THREE.MeshBasicMaterial({
      color: 0xff0000,
      wireframe: true,
    });

    const geometry = new THREE.SphereGeometry(1, 16, 16);
    const mesh = new THREE.Mesh(geometry, material);
    scene.add(mesh);

    const renderer = new THREE.WebGLRenderer({ canvas, alpha: true });
    renderer.setSize(sizes.width, sizes.height);

    // Animate
    const clock = new THREE.Clock();

    const tick = () => {
      const elapsedTime = clock.getElapsedTime();

      // Update meshes
      mesh.rotation.y = Math.PI * elapsedTime * 0.1;

      // Update controls
      // controls.update()

      // Render
      renderer.render(scene, camera);

      // Call tick again on the next frame
      window.requestAnimationFrame(tick);
    };

    tick();
  </script>
</Layout>
